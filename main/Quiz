from string import ascii_lowercase
import random

## Defining direct requirements for method
NUM_QUESTIONS_PER_QUIZ = 5
QUESTIONS = {
    "In what year was Minecraft fully released?": [
        "2011", "2009", "2015", "2021"
    ],
    "Minecraft has been used in educational environments to teach computer science, computer-aided design, and what other subject?": [
        "Chemistry", "Math", "Geography", "Language"
    ],
    "What is the mobile version of the game called?": [
        "Minecraft Earth", "Minecraft Bedrock", "Minecraft Java", "Minecraft Mobile"
    ],
    "The game follows a day and night cycle. How long does one full cycle last in real-time?": [
        "20 minutes",
        "30 minutes",
        "45 minutes",
        "1 hour",
    ],
}

## OVERALL STRUCTURE
def run_quiz():
    questions = prepare_questions(QUESTIONS, num_questions=NUM_QUESTIONS_PER_QUIZ)

    num_correct = 0
    for num, (question, alternatives) in enumerate(questions, start=1):
        print(f"\nQuestion {num}:")
        num_correct += ask_question(question, alternatives)

    print(f"\nYou got {num_correct} correct out of {num} questions")

##METHODS TO RUN
# Defining question selection, taking the arguements of questions and minimum samples(question iterations) to form
def prepare_questions(questions, num_questions):
    num_questions = min(num_questions, len(questions))
    return random.sample(list(questions.items()), k=num_questions)

# Defining answer return, taking question and alternatives as arguements
def get_answer(question, alternatives):
    print(f"{question}")
    labeled_alternatives = dict(zip(ascii_lowercase, alternatives))
    for label, alternative in labeled_alternatives.items():
        print(f"  {label}) {alternative}")

    while (answer_label := input("\nChoice? ")) not in labeled_alternatives:
        print(f"Please answer one of {', '.join(labeled_alternatives)}")

    return labeled_alternatives[answer_label]

# Defining question method, taking the list of questions alternatives, and returning integer outputs based on if input was correct/incorrect.
def ask_question(question, alternatives):
    correct_answer = alternatives[0]
    ordered_alternatives = random.sample(alternatives, k=len(alternatives))

    answer = get_answer(question, ordered_alternatives)
    if answer == correct_answer:
        print("⭐ Correct! ⭐")
        return 1
    else:
        print(f"The answer is {correct_answer!r}, not {answer!r}")
        return 0
    
# Starts application (i.e. runs when called as script but not upon import)
if __name__ == "__main__":
    run_quiz()